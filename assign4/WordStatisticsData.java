/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.refactorlabs.cs378.assign4;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WordStatisticsData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6943131309955142656L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WordStatisticsData\",\"namespace\":\"com.refactorlabs.cs378.assign4\",\"fields\":[{\"name\":\"paragraphCount\",\"type\":\"double\"},{\"name\":\"wordCount\",\"type\":\"long\"},{\"name\":\"doubleOfSquares\",\"type\":\"double\"},{\"name\":\"min\",\"type\":\"long\"},{\"name\":\"max\",\"type\":\"long\"},{\"name\":\"mean\",\"type\":\"double\"},{\"name\":\"variance\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double paragraphCount;
  @Deprecated public long wordCount;
  @Deprecated public double doubleOfSquares;
  @Deprecated public long min;
  @Deprecated public long max;
  @Deprecated public double mean;
  @Deprecated public double variance;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WordStatisticsData() {}

  /**
   * All-args constructor.
   * @param paragraphCount The new value for paragraphCount
   * @param wordCount The new value for wordCount
   * @param doubleOfSquares The new value for doubleOfSquares
   * @param min The new value for min
   * @param max The new value for max
   * @param mean The new value for mean
   * @param variance The new value for variance
   */
  public WordStatisticsData(java.lang.Double paragraphCount, java.lang.Long wordCount, java.lang.Double doubleOfSquares, java.lang.Long min, java.lang.Long max, java.lang.Double mean, java.lang.Double variance) {
    this.paragraphCount = paragraphCount;
    this.wordCount = wordCount;
    this.doubleOfSquares = doubleOfSquares;
    this.min = min;
    this.max = max;
    this.mean = mean;
    this.variance = variance;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return paragraphCount;
    case 1: return wordCount;
    case 2: return doubleOfSquares;
    case 3: return min;
    case 4: return max;
    case 5: return mean;
    case 6: return variance;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: paragraphCount = (java.lang.Double)value$; break;
    case 1: wordCount = (java.lang.Long)value$; break;
    case 2: doubleOfSquares = (java.lang.Double)value$; break;
    case 3: min = (java.lang.Long)value$; break;
    case 4: max = (java.lang.Long)value$; break;
    case 5: mean = (java.lang.Double)value$; break;
    case 6: variance = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'paragraphCount' field.
   * @return The value of the 'paragraphCount' field.
   */
  public java.lang.Double getParagraphCount() {
    return paragraphCount;
  }

  /**
   * Sets the value of the 'paragraphCount' field.
   * @param value the value to set.
   */
  public void setParagraphCount(java.lang.Double value) {
    this.paragraphCount = value;
  }

  /**
   * Gets the value of the 'wordCount' field.
   * @return The value of the 'wordCount' field.
   */
  public java.lang.Long getWordCount() {
    return wordCount;
  }

  /**
   * Sets the value of the 'wordCount' field.
   * @param value the value to set.
   */
  public void setWordCount(java.lang.Long value) {
    this.wordCount = value;
  }

  /**
   * Gets the value of the 'doubleOfSquares' field.
   * @return The value of the 'doubleOfSquares' field.
   */
  public java.lang.Double getDoubleOfSquares() {
    return doubleOfSquares;
  }

  /**
   * Sets the value of the 'doubleOfSquares' field.
   * @param value the value to set.
   */
  public void setDoubleOfSquares(java.lang.Double value) {
    this.doubleOfSquares = value;
  }

  /**
   * Gets the value of the 'min' field.
   * @return The value of the 'min' field.
   */
  public java.lang.Long getMin() {
    return min;
  }

  /**
   * Sets the value of the 'min' field.
   * @param value the value to set.
   */
  public void setMin(java.lang.Long value) {
    this.min = value;
  }

  /**
   * Gets the value of the 'max' field.
   * @return The value of the 'max' field.
   */
  public java.lang.Long getMax() {
    return max;
  }

  /**
   * Sets the value of the 'max' field.
   * @param value the value to set.
   */
  public void setMax(java.lang.Long value) {
    this.max = value;
  }

  /**
   * Gets the value of the 'mean' field.
   * @return The value of the 'mean' field.
   */
  public java.lang.Double getMean() {
    return mean;
  }

  /**
   * Sets the value of the 'mean' field.
   * @param value the value to set.
   */
  public void setMean(java.lang.Double value) {
    this.mean = value;
  }

  /**
   * Gets the value of the 'variance' field.
   * @return The value of the 'variance' field.
   */
  public java.lang.Double getVariance() {
    return variance;
  }

  /**
   * Sets the value of the 'variance' field.
   * @param value the value to set.
   */
  public void setVariance(java.lang.Double value) {
    this.variance = value;
  }

  /**
   * Creates a new WordStatisticsData RecordBuilder.
   * @return A new WordStatisticsData RecordBuilder
   */
  public static com.refactorlabs.cs378.assign4.WordStatisticsData.Builder newBuilder() {
    return new com.refactorlabs.cs378.assign4.WordStatisticsData.Builder();
  }

  /**
   * Creates a new WordStatisticsData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WordStatisticsData RecordBuilder
   */
  public static com.refactorlabs.cs378.assign4.WordStatisticsData.Builder newBuilder(com.refactorlabs.cs378.assign4.WordStatisticsData.Builder other) {
    return new com.refactorlabs.cs378.assign4.WordStatisticsData.Builder(other);
  }

  /**
   * Creates a new WordStatisticsData RecordBuilder by copying an existing WordStatisticsData instance.
   * @param other The existing instance to copy.
   * @return A new WordStatisticsData RecordBuilder
   */
  public static com.refactorlabs.cs378.assign4.WordStatisticsData.Builder newBuilder(com.refactorlabs.cs378.assign4.WordStatisticsData other) {
    return new com.refactorlabs.cs378.assign4.WordStatisticsData.Builder(other);
  }

  /**
   * RecordBuilder for WordStatisticsData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WordStatisticsData>
    implements org.apache.avro.data.RecordBuilder<WordStatisticsData> {

    private double paragraphCount;
    private long wordCount;
    private double doubleOfSquares;
    private long min;
    private long max;
    private double mean;
    private double variance;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.refactorlabs.cs378.assign4.WordStatisticsData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paragraphCount)) {
        this.paragraphCount = data().deepCopy(fields()[0].schema(), other.paragraphCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wordCount)) {
        this.wordCount = data().deepCopy(fields()[1].schema(), other.wordCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doubleOfSquares)) {
        this.doubleOfSquares = data().deepCopy(fields()[2].schema(), other.doubleOfSquares);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.min)) {
        this.min = data().deepCopy(fields()[3].schema(), other.min);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.max)) {
        this.max = data().deepCopy(fields()[4].schema(), other.max);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mean)) {
        this.mean = data().deepCopy(fields()[5].schema(), other.mean);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.variance)) {
        this.variance = data().deepCopy(fields()[6].schema(), other.variance);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WordStatisticsData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.refactorlabs.cs378.assign4.WordStatisticsData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.paragraphCount)) {
        this.paragraphCount = data().deepCopy(fields()[0].schema(), other.paragraphCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wordCount)) {
        this.wordCount = data().deepCopy(fields()[1].schema(), other.wordCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doubleOfSquares)) {
        this.doubleOfSquares = data().deepCopy(fields()[2].schema(), other.doubleOfSquares);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.min)) {
        this.min = data().deepCopy(fields()[3].schema(), other.min);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.max)) {
        this.max = data().deepCopy(fields()[4].schema(), other.max);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mean)) {
        this.mean = data().deepCopy(fields()[5].schema(), other.mean);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.variance)) {
        this.variance = data().deepCopy(fields()[6].schema(), other.variance);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'paragraphCount' field.
      * @return The value.
      */
    public java.lang.Double getParagraphCount() {
      return paragraphCount;
    }

    /**
      * Sets the value of the 'paragraphCount' field.
      * @param value The value of 'paragraphCount'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder setParagraphCount(double value) {
      validate(fields()[0], value);
      this.paragraphCount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paragraphCount' field has been set.
      * @return True if the 'paragraphCount' field has been set, false otherwise.
      */
    public boolean hasParagraphCount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'paragraphCount' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder clearParagraphCount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'wordCount' field.
      * @return The value.
      */
    public java.lang.Long getWordCount() {
      return wordCount;
    }

    /**
      * Sets the value of the 'wordCount' field.
      * @param value The value of 'wordCount'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder setWordCount(long value) {
      validate(fields()[1], value);
      this.wordCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'wordCount' field has been set.
      * @return True if the 'wordCount' field has been set, false otherwise.
      */
    public boolean hasWordCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'wordCount' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder clearWordCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'doubleOfSquares' field.
      * @return The value.
      */
    public java.lang.Double getDoubleOfSquares() {
      return doubleOfSquares;
    }

    /**
      * Sets the value of the 'doubleOfSquares' field.
      * @param value The value of 'doubleOfSquares'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder setDoubleOfSquares(double value) {
      validate(fields()[2], value);
      this.doubleOfSquares = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'doubleOfSquares' field has been set.
      * @return True if the 'doubleOfSquares' field has been set, false otherwise.
      */
    public boolean hasDoubleOfSquares() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'doubleOfSquares' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder clearDoubleOfSquares() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'min' field.
      * @return The value.
      */
    public java.lang.Long getMin() {
      return min;
    }

    /**
      * Sets the value of the 'min' field.
      * @param value The value of 'min'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder setMin(long value) {
      validate(fields()[3], value);
      this.min = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'min' field has been set.
      * @return True if the 'min' field has been set, false otherwise.
      */
    public boolean hasMin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'min' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder clearMin() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'max' field.
      * @return The value.
      */
    public java.lang.Long getMax() {
      return max;
    }

    /**
      * Sets the value of the 'max' field.
      * @param value The value of 'max'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder setMax(long value) {
      validate(fields()[4], value);
      this.max = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'max' field has been set.
      * @return True if the 'max' field has been set, false otherwise.
      */
    public boolean hasMax() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'max' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder clearMax() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'mean' field.
      * @return The value.
      */
    public java.lang.Double getMean() {
      return mean;
    }

    /**
      * Sets the value of the 'mean' field.
      * @param value The value of 'mean'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder setMean(double value) {
      validate(fields()[5], value);
      this.mean = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'mean' field has been set.
      * @return True if the 'mean' field has been set, false otherwise.
      */
    public boolean hasMean() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'mean' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder clearMean() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'variance' field.
      * @return The value.
      */
    public java.lang.Double getVariance() {
      return variance;
    }

    /**
      * Sets the value of the 'variance' field.
      * @param value The value of 'variance'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder setVariance(double value) {
      validate(fields()[6], value);
      this.variance = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'variance' field has been set.
      * @return True if the 'variance' field has been set, false otherwise.
      */
    public boolean hasVariance() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'variance' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign4.WordStatisticsData.Builder clearVariance() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public WordStatisticsData build() {
      try {
        WordStatisticsData record = new WordStatisticsData();
        record.paragraphCount = fieldSetFlags()[0] ? this.paragraphCount : (java.lang.Double) defaultValue(fields()[0]);
        record.wordCount = fieldSetFlags()[1] ? this.wordCount : (java.lang.Long) defaultValue(fields()[1]);
        record.doubleOfSquares = fieldSetFlags()[2] ? this.doubleOfSquares : (java.lang.Double) defaultValue(fields()[2]);
        record.min = fieldSetFlags()[3] ? this.min : (java.lang.Long) defaultValue(fields()[3]);
        record.max = fieldSetFlags()[4] ? this.max : (java.lang.Long) defaultValue(fields()[4]);
        record.mean = fieldSetFlags()[5] ? this.mean : (java.lang.Double) defaultValue(fields()[5]);
        record.variance = fieldSetFlags()[6] ? this.variance : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
