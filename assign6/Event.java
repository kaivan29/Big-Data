/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.refactorlabs.cs378.assign6;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6778520419028563885L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"com.refactorlabs.cs378.assign6\",\"fields\":[{\"name\":\"event_type\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"symbols\":[\"CHANGE\",\"CLICK\",\"DISPLAY\",\"EDIT\",\"SHOW\",\"VISIT\"]}},{\"name\":\"event_subtype\",\"type\":{\"type\":\"enum\",\"name\":\"EventSubtype\",\"symbols\":[\"CONTACT_FORM\",\"ALTERNATIVE\",\"CONTACT_BUTTON\",\"FEATURES\",\"GET_DIRECTIONS\",\"VEHICLE_HISTORY\",\"BADGE_DETAIL\",\"PHOTO_MODAL\",\"BADGES\",\"MARKET_REPORT\"]}},{\"name\":\"page\",\"type\":\"string\"},{\"name\":\"referring_domain\",\"type\":\"string\"},{\"name\":\"event_timestamp\",\"type\":\"string\"},{\"name\":\"city\",\"type\":[\"null\",\"string\"]},{\"name\":\"vin\",\"type\":\"string\"},{\"name\":\"vehicle_condition\",\"type\":{\"type\":\"enum\",\"name\":\"vehicle_condition_types\",\"symbols\":[\"NEW\",\"USED\"]}},{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"make\",\"type\":\"string\"},{\"name\":\"model\",\"type\":\"string\"},{\"name\":\"trim\",\"type\":\"string\"},{\"name\":\"body_style\",\"type\":{\"type\":\"enum\",\"name\":\"body_style_type\",\"symbols\":[\"CONVERTIBLE\",\"COUPE\",\"HATCHBACK\",\"MINIVAN\",\"PICKUP\",\"SUV\",\"SEDAN\",\"VAN\",\"WAGON\"]}},{\"name\":\"cab_style\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"cab_style_type\",\"symbols\":[\"CREW_CAB\",\"EXTENDED_CAB\",\"REGULAR_CAB\"]}]},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"mileage\",\"type\":\"double\"},{\"name\":\"image_count\",\"type\":\"float\"},{\"name\":\"carfax_free_report\",\"type\":\"boolean\"},{\"name\":\"features\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.refactorlabs.cs378.assign6.EventType event_type;
  @Deprecated public com.refactorlabs.cs378.assign6.EventSubtype event_subtype;
  @Deprecated public java.lang.CharSequence page;
  @Deprecated public java.lang.CharSequence referring_domain;
  @Deprecated public java.lang.CharSequence event_timestamp;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence vin;
  @Deprecated public com.refactorlabs.cs378.assign6.vehicle_condition_types vehicle_condition;
  @Deprecated public int year;
  @Deprecated public java.lang.CharSequence make;
  @Deprecated public java.lang.CharSequence model;
  @Deprecated public java.lang.CharSequence trim;
  @Deprecated public com.refactorlabs.cs378.assign6.body_style_type body_style;
  @Deprecated public com.refactorlabs.cs378.assign6.cab_style_type cab_style;
  @Deprecated public double price;
  @Deprecated public double mileage;
  @Deprecated public float image_count;
  @Deprecated public boolean carfax_free_report;
  @Deprecated public java.util.List<java.lang.CharSequence> features;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Event() {}

  /**
   * All-args constructor.
   * @param event_type The new value for event_type
   * @param event_subtype The new value for event_subtype
   * @param page The new value for page
   * @param referring_domain The new value for referring_domain
   * @param event_timestamp The new value for event_timestamp
   * @param city The new value for city
   * @param vin The new value for vin
   * @param vehicle_condition The new value for vehicle_condition
   * @param year The new value for year
   * @param make The new value for make
   * @param model The new value for model
   * @param trim The new value for trim
   * @param body_style The new value for body_style
   * @param cab_style The new value for cab_style
   * @param price The new value for price
   * @param mileage The new value for mileage
   * @param image_count The new value for image_count
   * @param carfax_free_report The new value for carfax_free_report
   * @param features The new value for features
   */
  public Event(com.refactorlabs.cs378.assign6.EventType event_type, com.refactorlabs.cs378.assign6.EventSubtype event_subtype, java.lang.CharSequence page, java.lang.CharSequence referring_domain, java.lang.CharSequence event_timestamp, java.lang.CharSequence city, java.lang.CharSequence vin, com.refactorlabs.cs378.assign6.vehicle_condition_types vehicle_condition, java.lang.Integer year, java.lang.CharSequence make, java.lang.CharSequence model, java.lang.CharSequence trim, com.refactorlabs.cs378.assign6.body_style_type body_style, com.refactorlabs.cs378.assign6.cab_style_type cab_style, java.lang.Double price, java.lang.Double mileage, java.lang.Float image_count, java.lang.Boolean carfax_free_report, java.util.List<java.lang.CharSequence> features) {
    this.event_type = event_type;
    this.event_subtype = event_subtype;
    this.page = page;
    this.referring_domain = referring_domain;
    this.event_timestamp = event_timestamp;
    this.city = city;
    this.vin = vin;
    this.vehicle_condition = vehicle_condition;
    this.year = year;
    this.make = make;
    this.model = model;
    this.trim = trim;
    this.body_style = body_style;
    this.cab_style = cab_style;
    this.price = price;
    this.mileage = mileage;
    this.image_count = image_count;
    this.carfax_free_report = carfax_free_report;
    this.features = features;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return event_type;
    case 1: return event_subtype;
    case 2: return page;
    case 3: return referring_domain;
    case 4: return event_timestamp;
    case 5: return city;
    case 6: return vin;
    case 7: return vehicle_condition;
    case 8: return year;
    case 9: return make;
    case 10: return model;
    case 11: return trim;
    case 12: return body_style;
    case 13: return cab_style;
    case 14: return price;
    case 15: return mileage;
    case 16: return image_count;
    case 17: return carfax_free_report;
    case 18: return features;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: event_type = (com.refactorlabs.cs378.assign6.EventType)value$; break;
    case 1: event_subtype = (com.refactorlabs.cs378.assign6.EventSubtype)value$; break;
    case 2: page = (java.lang.CharSequence)value$; break;
    case 3: referring_domain = (java.lang.CharSequence)value$; break;
    case 4: event_timestamp = (java.lang.CharSequence)value$; break;
    case 5: city = (java.lang.CharSequence)value$; break;
    case 6: vin = (java.lang.CharSequence)value$; break;
    case 7: vehicle_condition = (com.refactorlabs.cs378.assign6.vehicle_condition_types)value$; break;
    case 8: year = (java.lang.Integer)value$; break;
    case 9: make = (java.lang.CharSequence)value$; break;
    case 10: model = (java.lang.CharSequence)value$; break;
    case 11: trim = (java.lang.CharSequence)value$; break;
    case 12: body_style = (com.refactorlabs.cs378.assign6.body_style_type)value$; break;
    case 13: cab_style = (com.refactorlabs.cs378.assign6.cab_style_type)value$; break;
    case 14: price = (java.lang.Double)value$; break;
    case 15: mileage = (java.lang.Double)value$; break;
    case 16: image_count = (java.lang.Float)value$; break;
    case 17: carfax_free_report = (java.lang.Boolean)value$; break;
    case 18: features = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'event_type' field.
   * @return The value of the 'event_type' field.
   */
  public com.refactorlabs.cs378.assign6.EventType getEventType() {
    return event_type;
  }

  /**
   * Sets the value of the 'event_type' field.
   * @param value the value to set.
   */
  public void setEventType(com.refactorlabs.cs378.assign6.EventType value) {
    this.event_type = value;
  }

  /**
   * Gets the value of the 'event_subtype' field.
   * @return The value of the 'event_subtype' field.
   */
  public com.refactorlabs.cs378.assign6.EventSubtype getEventSubtype() {
    return event_subtype;
  }

  /**
   * Sets the value of the 'event_subtype' field.
   * @param value the value to set.
   */
  public void setEventSubtype(com.refactorlabs.cs378.assign6.EventSubtype value) {
    this.event_subtype = value;
  }

  /**
   * Gets the value of the 'page' field.
   * @return The value of the 'page' field.
   */
  public java.lang.CharSequence getPage() {
    return page;
  }

  /**
   * Sets the value of the 'page' field.
   * @param value the value to set.
   */
  public void setPage(java.lang.CharSequence value) {
    this.page = value;
  }

  /**
   * Gets the value of the 'referring_domain' field.
   * @return The value of the 'referring_domain' field.
   */
  public java.lang.CharSequence getReferringDomain() {
    return referring_domain;
  }

  /**
   * Sets the value of the 'referring_domain' field.
   * @param value the value to set.
   */
  public void setReferringDomain(java.lang.CharSequence value) {
    this.referring_domain = value;
  }

  /**
   * Gets the value of the 'event_timestamp' field.
   * @return The value of the 'event_timestamp' field.
   */
  public java.lang.CharSequence getEventTimestamp() {
    return event_timestamp;
  }

  /**
   * Sets the value of the 'event_timestamp' field.
   * @param value the value to set.
   */
  public void setEventTimestamp(java.lang.CharSequence value) {
    this.event_timestamp = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'vin' field.
   * @return The value of the 'vin' field.
   */
  public java.lang.CharSequence getVin() {
    return vin;
  }

  /**
   * Sets the value of the 'vin' field.
   * @param value the value to set.
   */
  public void setVin(java.lang.CharSequence value) {
    this.vin = value;
  }

  /**
   * Gets the value of the 'vehicle_condition' field.
   * @return The value of the 'vehicle_condition' field.
   */
  public com.refactorlabs.cs378.assign6.vehicle_condition_types getVehicleCondition() {
    return vehicle_condition;
  }

  /**
   * Sets the value of the 'vehicle_condition' field.
   * @param value the value to set.
   */
  public void setVehicleCondition(com.refactorlabs.cs378.assign6.vehicle_condition_types value) {
    this.vehicle_condition = value;
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'make' field.
   * @return The value of the 'make' field.
   */
  public java.lang.CharSequence getMake() {
    return make;
  }

  /**
   * Sets the value of the 'make' field.
   * @param value the value to set.
   */
  public void setMake(java.lang.CharSequence value) {
    this.make = value;
  }

  /**
   * Gets the value of the 'model' field.
   * @return The value of the 'model' field.
   */
  public java.lang.CharSequence getModel() {
    return model;
  }

  /**
   * Sets the value of the 'model' field.
   * @param value the value to set.
   */
  public void setModel(java.lang.CharSequence value) {
    this.model = value;
  }

  /**
   * Gets the value of the 'trim' field.
   * @return The value of the 'trim' field.
   */
  public java.lang.CharSequence getTrim() {
    return trim;
  }

  /**
   * Sets the value of the 'trim' field.
   * @param value the value to set.
   */
  public void setTrim(java.lang.CharSequence value) {
    this.trim = value;
  }

  /**
   * Gets the value of the 'body_style' field.
   * @return The value of the 'body_style' field.
   */
  public com.refactorlabs.cs378.assign6.body_style_type getBodyStyle() {
    return body_style;
  }

  /**
   * Sets the value of the 'body_style' field.
   * @param value the value to set.
   */
  public void setBodyStyle(com.refactorlabs.cs378.assign6.body_style_type value) {
    this.body_style = value;
  }

  /**
   * Gets the value of the 'cab_style' field.
   * @return The value of the 'cab_style' field.
   */
  public com.refactorlabs.cs378.assign6.cab_style_type getCabStyle() {
    return cab_style;
  }

  /**
   * Sets the value of the 'cab_style' field.
   * @param value the value to set.
   */
  public void setCabStyle(com.refactorlabs.cs378.assign6.cab_style_type value) {
    this.cab_style = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'mileage' field.
   * @return The value of the 'mileage' field.
   */
  public java.lang.Double getMileage() {
    return mileage;
  }

  /**
   * Sets the value of the 'mileage' field.
   * @param value the value to set.
   */
  public void setMileage(java.lang.Double value) {
    this.mileage = value;
  }

  /**
   * Gets the value of the 'image_count' field.
   * @return The value of the 'image_count' field.
   */
  public java.lang.Float getImageCount() {
    return image_count;
  }

  /**
   * Sets the value of the 'image_count' field.
   * @param value the value to set.
   */
  public void setImageCount(java.lang.Float value) {
    this.image_count = value;
  }

  /**
   * Gets the value of the 'carfax_free_report' field.
   * @return The value of the 'carfax_free_report' field.
   */
  public java.lang.Boolean getCarfaxFreeReport() {
    return carfax_free_report;
  }

  /**
   * Sets the value of the 'carfax_free_report' field.
   * @param value the value to set.
   */
  public void setCarfaxFreeReport(java.lang.Boolean value) {
    this.carfax_free_report = value;
  }

  /**
   * Gets the value of the 'features' field.
   * @return The value of the 'features' field.
   */
  public java.util.List<java.lang.CharSequence> getFeatures() {
    return features;
  }

  /**
   * Sets the value of the 'features' field.
   * @param value the value to set.
   */
  public void setFeatures(java.util.List<java.lang.CharSequence> value) {
    this.features = value;
  }

  /**
   * Creates a new Event RecordBuilder.
   * @return A new Event RecordBuilder
   */
  public static com.refactorlabs.cs378.assign6.Event.Builder newBuilder() {
    return new com.refactorlabs.cs378.assign6.Event.Builder();
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Event RecordBuilder
   */
  public static com.refactorlabs.cs378.assign6.Event.Builder newBuilder(com.refactorlabs.cs378.assign6.Event.Builder other) {
    return new com.refactorlabs.cs378.assign6.Event.Builder(other);
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Event instance.
   * @param other The existing instance to copy.
   * @return A new Event RecordBuilder
   */
  public static com.refactorlabs.cs378.assign6.Event.Builder newBuilder(com.refactorlabs.cs378.assign6.Event other) {
    return new com.refactorlabs.cs378.assign6.Event.Builder(other);
  }

  /**
   * RecordBuilder for Event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    private com.refactorlabs.cs378.assign6.EventType event_type;
    private com.refactorlabs.cs378.assign6.EventSubtype event_subtype;
    private java.lang.CharSequence page;
    private java.lang.CharSequence referring_domain;
    private java.lang.CharSequence event_timestamp;
    private java.lang.CharSequence city;
    private java.lang.CharSequence vin;
    private com.refactorlabs.cs378.assign6.vehicle_condition_types vehicle_condition;
    private int year;
    private java.lang.CharSequence make;
    private java.lang.CharSequence model;
    private java.lang.CharSequence trim;
    private com.refactorlabs.cs378.assign6.body_style_type body_style;
    private com.refactorlabs.cs378.assign6.cab_style_type cab_style;
    private double price;
    private double mileage;
    private float image_count;
    private boolean carfax_free_report;
    private java.util.List<java.lang.CharSequence> features;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.refactorlabs.cs378.assign6.Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.event_type)) {
        this.event_type = data().deepCopy(fields()[0].schema(), other.event_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event_subtype)) {
        this.event_subtype = data().deepCopy(fields()[1].schema(), other.event_subtype);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.page)) {
        this.page = data().deepCopy(fields()[2].schema(), other.page);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referring_domain)) {
        this.referring_domain = data().deepCopy(fields()[3].schema(), other.referring_domain);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.event_timestamp)) {
        this.event_timestamp = data().deepCopy(fields()[4].schema(), other.event_timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.city)) {
        this.city = data().deepCopy(fields()[5].schema(), other.city);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.vin)) {
        this.vin = data().deepCopy(fields()[6].schema(), other.vin);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.vehicle_condition)) {
        this.vehicle_condition = data().deepCopy(fields()[7].schema(), other.vehicle_condition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.year)) {
        this.year = data().deepCopy(fields()[8].schema(), other.year);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.make)) {
        this.make = data().deepCopy(fields()[9].schema(), other.make);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.model)) {
        this.model = data().deepCopy(fields()[10].schema(), other.model);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.trim)) {
        this.trim = data().deepCopy(fields()[11].schema(), other.trim);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.body_style)) {
        this.body_style = data().deepCopy(fields()[12].schema(), other.body_style);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.cab_style)) {
        this.cab_style = data().deepCopy(fields()[13].schema(), other.cab_style);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.price)) {
        this.price = data().deepCopy(fields()[14].schema(), other.price);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.mileage)) {
        this.mileage = data().deepCopy(fields()[15].schema(), other.mileage);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.image_count)) {
        this.image_count = data().deepCopy(fields()[16].schema(), other.image_count);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.carfax_free_report)) {
        this.carfax_free_report = data().deepCopy(fields()[17].schema(), other.carfax_free_report);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.features)) {
        this.features = data().deepCopy(fields()[18].schema(), other.features);
        fieldSetFlags()[18] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Event instance
     * @param other The existing instance to copy.
     */
    private Builder(com.refactorlabs.cs378.assign6.Event other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.event_type)) {
        this.event_type = data().deepCopy(fields()[0].schema(), other.event_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event_subtype)) {
        this.event_subtype = data().deepCopy(fields()[1].schema(), other.event_subtype);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.page)) {
        this.page = data().deepCopy(fields()[2].schema(), other.page);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referring_domain)) {
        this.referring_domain = data().deepCopy(fields()[3].schema(), other.referring_domain);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.event_timestamp)) {
        this.event_timestamp = data().deepCopy(fields()[4].schema(), other.event_timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.city)) {
        this.city = data().deepCopy(fields()[5].schema(), other.city);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.vin)) {
        this.vin = data().deepCopy(fields()[6].schema(), other.vin);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.vehicle_condition)) {
        this.vehicle_condition = data().deepCopy(fields()[7].schema(), other.vehicle_condition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.year)) {
        this.year = data().deepCopy(fields()[8].schema(), other.year);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.make)) {
        this.make = data().deepCopy(fields()[9].schema(), other.make);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.model)) {
        this.model = data().deepCopy(fields()[10].schema(), other.model);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.trim)) {
        this.trim = data().deepCopy(fields()[11].schema(), other.trim);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.body_style)) {
        this.body_style = data().deepCopy(fields()[12].schema(), other.body_style);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.cab_style)) {
        this.cab_style = data().deepCopy(fields()[13].schema(), other.cab_style);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.price)) {
        this.price = data().deepCopy(fields()[14].schema(), other.price);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.mileage)) {
        this.mileage = data().deepCopy(fields()[15].schema(), other.mileage);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.image_count)) {
        this.image_count = data().deepCopy(fields()[16].schema(), other.image_count);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.carfax_free_report)) {
        this.carfax_free_report = data().deepCopy(fields()[17].schema(), other.carfax_free_report);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.features)) {
        this.features = data().deepCopy(fields()[18].schema(), other.features);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'event_type' field.
      * @return The value.
      */
    public com.refactorlabs.cs378.assign6.EventType getEventType() {
      return event_type;
    }

    /**
      * Sets the value of the 'event_type' field.
      * @param value The value of 'event_type'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setEventType(com.refactorlabs.cs378.assign6.EventType value) {
      validate(fields()[0], value);
      this.event_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'event_type' field has been set.
      * @return True if the 'event_type' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'event_type' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearEventType() {
      event_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'event_subtype' field.
      * @return The value.
      */
    public com.refactorlabs.cs378.assign6.EventSubtype getEventSubtype() {
      return event_subtype;
    }

    /**
      * Sets the value of the 'event_subtype' field.
      * @param value The value of 'event_subtype'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setEventSubtype(com.refactorlabs.cs378.assign6.EventSubtype value) {
      validate(fields()[1], value);
      this.event_subtype = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'event_subtype' field has been set.
      * @return True if the 'event_subtype' field has been set, false otherwise.
      */
    public boolean hasEventSubtype() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'event_subtype' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearEventSubtype() {
      event_subtype = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'page' field.
      * @return The value.
      */
    public java.lang.CharSequence getPage() {
      return page;
    }

    /**
      * Sets the value of the 'page' field.
      * @param value The value of 'page'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setPage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.page = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'page' field has been set.
      * @return True if the 'page' field has been set, false otherwise.
      */
    public boolean hasPage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'page' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearPage() {
      page = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'referring_domain' field.
      * @return The value.
      */
    public java.lang.CharSequence getReferringDomain() {
      return referring_domain;
    }

    /**
      * Sets the value of the 'referring_domain' field.
      * @param value The value of 'referring_domain'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setReferringDomain(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.referring_domain = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'referring_domain' field has been set.
      * @return True if the 'referring_domain' field has been set, false otherwise.
      */
    public boolean hasReferringDomain() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'referring_domain' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearReferringDomain() {
      referring_domain = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'event_timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventTimestamp() {
      return event_timestamp;
    }

    /**
      * Sets the value of the 'event_timestamp' field.
      * @param value The value of 'event_timestamp'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setEventTimestamp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.event_timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'event_timestamp' field has been set.
      * @return True if the 'event_timestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'event_timestamp' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearEventTimestamp() {
      event_timestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.city = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearCity() {
      city = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'vin' field.
      * @return The value.
      */
    public java.lang.CharSequence getVin() {
      return vin;
    }

    /**
      * Sets the value of the 'vin' field.
      * @param value The value of 'vin'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setVin(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.vin = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'vin' field has been set.
      * @return True if the 'vin' field has been set, false otherwise.
      */
    public boolean hasVin() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'vin' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearVin() {
      vin = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicle_condition' field.
      * @return The value.
      */
    public com.refactorlabs.cs378.assign6.vehicle_condition_types getVehicleCondition() {
      return vehicle_condition;
    }

    /**
      * Sets the value of the 'vehicle_condition' field.
      * @param value The value of 'vehicle_condition'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setVehicleCondition(com.refactorlabs.cs378.assign6.vehicle_condition_types value) {
      validate(fields()[7], value);
      this.vehicle_condition = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicle_condition' field has been set.
      * @return True if the 'vehicle_condition' field has been set, false otherwise.
      */
    public boolean hasVehicleCondition() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'vehicle_condition' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearVehicleCondition() {
      vehicle_condition = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public java.lang.Integer getYear() {
      return year;
    }

    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setYear(int value) {
      validate(fields()[8], value);
      this.year = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearYear() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'make' field.
      * @return The value.
      */
    public java.lang.CharSequence getMake() {
      return make;
    }

    /**
      * Sets the value of the 'make' field.
      * @param value The value of 'make'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setMake(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.make = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'make' field has been set.
      * @return True if the 'make' field has been set, false otherwise.
      */
    public boolean hasMake() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'make' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearMake() {
      make = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'model' field.
      * @return The value.
      */
    public java.lang.CharSequence getModel() {
      return model;
    }

    /**
      * Sets the value of the 'model' field.
      * @param value The value of 'model'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setModel(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.model = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'model' field has been set.
      * @return True if the 'model' field has been set, false otherwise.
      */
    public boolean hasModel() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'model' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearModel() {
      model = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'trim' field.
      * @return The value.
      */
    public java.lang.CharSequence getTrim() {
      return trim;
    }

    /**
      * Sets the value of the 'trim' field.
      * @param value The value of 'trim'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setTrim(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.trim = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'trim' field has been set.
      * @return True if the 'trim' field has been set, false otherwise.
      */
    public boolean hasTrim() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'trim' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearTrim() {
      trim = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'body_style' field.
      * @return The value.
      */
    public com.refactorlabs.cs378.assign6.body_style_type getBodyStyle() {
      return body_style;
    }

    /**
      * Sets the value of the 'body_style' field.
      * @param value The value of 'body_style'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setBodyStyle(com.refactorlabs.cs378.assign6.body_style_type value) {
      validate(fields()[12], value);
      this.body_style = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'body_style' field has been set.
      * @return True if the 'body_style' field has been set, false otherwise.
      */
    public boolean hasBodyStyle() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'body_style' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearBodyStyle() {
      body_style = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'cab_style' field.
      * @return The value.
      */
    public com.refactorlabs.cs378.assign6.cab_style_type getCabStyle() {
      return cab_style;
    }

    /**
      * Sets the value of the 'cab_style' field.
      * @param value The value of 'cab_style'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setCabStyle(com.refactorlabs.cs378.assign6.cab_style_type value) {
      validate(fields()[13], value);
      this.cab_style = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'cab_style' field has been set.
      * @return True if the 'cab_style' field has been set, false otherwise.
      */
    public boolean hasCabStyle() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'cab_style' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearCabStyle() {
      cab_style = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setPrice(double value) {
      validate(fields()[14], value);
      this.price = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearPrice() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'mileage' field.
      * @return The value.
      */
    public java.lang.Double getMileage() {
      return mileage;
    }

    /**
      * Sets the value of the 'mileage' field.
      * @param value The value of 'mileage'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setMileage(double value) {
      validate(fields()[15], value);
      this.mileage = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'mileage' field has been set.
      * @return True if the 'mileage' field has been set, false otherwise.
      */
    public boolean hasMileage() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'mileage' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearMileage() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'image_count' field.
      * @return The value.
      */
    public java.lang.Float getImageCount() {
      return image_count;
    }

    /**
      * Sets the value of the 'image_count' field.
      * @param value The value of 'image_count'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setImageCount(float value) {
      validate(fields()[16], value);
      this.image_count = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'image_count' field has been set.
      * @return True if the 'image_count' field has been set, false otherwise.
      */
    public boolean hasImageCount() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'image_count' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearImageCount() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'carfax_free_report' field.
      * @return The value.
      */
    public java.lang.Boolean getCarfaxFreeReport() {
      return carfax_free_report;
    }

    /**
      * Sets the value of the 'carfax_free_report' field.
      * @param value The value of 'carfax_free_report'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setCarfaxFreeReport(boolean value) {
      validate(fields()[17], value);
      this.carfax_free_report = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'carfax_free_report' field has been set.
      * @return True if the 'carfax_free_report' field has been set, false otherwise.
      */
    public boolean hasCarfaxFreeReport() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'carfax_free_report' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearCarfaxFreeReport() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'features' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getFeatures() {
      return features;
    }

    /**
      * Sets the value of the 'features' field.
      * @param value The value of 'features'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder setFeatures(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[18], value);
      this.features = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'features' field has been set.
      * @return True if the 'features' field has been set, false otherwise.
      */
    public boolean hasFeatures() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'features' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.assign6.Event.Builder clearFeatures() {
      features = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    public Event build() {
      try {
        Event record = new Event();
        record.event_type = fieldSetFlags()[0] ? this.event_type : (com.refactorlabs.cs378.assign6.EventType) defaultValue(fields()[0]);
        record.event_subtype = fieldSetFlags()[1] ? this.event_subtype : (com.refactorlabs.cs378.assign6.EventSubtype) defaultValue(fields()[1]);
        record.page = fieldSetFlags()[2] ? this.page : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.referring_domain = fieldSetFlags()[3] ? this.referring_domain : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.event_timestamp = fieldSetFlags()[4] ? this.event_timestamp : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.city = fieldSetFlags()[5] ? this.city : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.vin = fieldSetFlags()[6] ? this.vin : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.vehicle_condition = fieldSetFlags()[7] ? this.vehicle_condition : (com.refactorlabs.cs378.assign6.vehicle_condition_types) defaultValue(fields()[7]);
        record.year = fieldSetFlags()[8] ? this.year : (java.lang.Integer) defaultValue(fields()[8]);
        record.make = fieldSetFlags()[9] ? this.make : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.model = fieldSetFlags()[10] ? this.model : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.trim = fieldSetFlags()[11] ? this.trim : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.body_style = fieldSetFlags()[12] ? this.body_style : (com.refactorlabs.cs378.assign6.body_style_type) defaultValue(fields()[12]);
        record.cab_style = fieldSetFlags()[13] ? this.cab_style : (com.refactorlabs.cs378.assign6.cab_style_type) defaultValue(fields()[13]);
        record.price = fieldSetFlags()[14] ? this.price : (java.lang.Double) defaultValue(fields()[14]);
        record.mileage = fieldSetFlags()[15] ? this.mileage : (java.lang.Double) defaultValue(fields()[15]);
        record.image_count = fieldSetFlags()[16] ? this.image_count : (java.lang.Float) defaultValue(fields()[16]);
        record.carfax_free_report = fieldSetFlags()[17] ? this.carfax_free_report : (java.lang.Boolean) defaultValue(fields()[17]);
        record.features = fieldSetFlags()[18] ? this.features : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[18]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
